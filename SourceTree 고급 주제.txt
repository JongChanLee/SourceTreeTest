

stash - 안전한 곳에 보관하다. (끝나지 않은 것을)
  -> 브랜치를 사용하는 것으로 대신 할 수 있다.

-> stash를 하면 commit되지 않고 사라진다. -> 어딘가에 저장된다.
  -> 마지막의 버전으로 돌아온다.
  -> 사이드 바의 Stashes에 들어간다.(Stash를 만들어야 생긴다.)

다시 stash를 적용할 때는 해당 stash를 오른쪽 클릭하고 apply 하면 된다.

Stash도 같은 위치를 수정하면 충돌이 일어난다.



-------------------------------

태그 Tag
중요 한 버전에 이름을 지정 할 때,
ex) 윈도우 95, 98, xp 등등

Tag를 달려는 commit 버전에 오른쪽 클릭 하고 [Tag]를 클릭
-> Tag name에 이름을 지정 하면 그 이름으루 <>가 새로 생긴다.
태그가 있는 위치에 브랜치를 새로 만들 수도 있다.
-> 그 버전을 사용하는 사람들을 위해 업데이트를 할 수 있다?

원격 저장소로 Push 할 때 [Push all tags]를 체크해야 태그까지 Push된다.
-> 기본적으로는 안한다고 생각한다.
   -> github에서는 tag를 releases라고 한다.


------------------------------------

파일 무시하기 - Ignore

SourceTree는 저장소로 등록한 폴더 안에 새로운 파일이 생기거나 지워지거나 수정 되면 어떤 파일이든지 탐지를 한다.
만약 특정 파일이 수정 되는 것을 SourceTree가 탐지할 필요가 없다면?

1. commit 하기 전에 수정이 되었다는 것을 탐지하고 목록에 나타나는데 그 목록에서 무시할 대상을 오른쪽 클릭하고 [ignore]를 클릭한다
2. 옵션이 여러가지가 있는데 이중에 하나를 선택
  [Ignore exact filename(s)] : 입력한 파일 이름과 똑같은 이름의 파일만 무시하겠다 라는 것
  [Ignore all files with this extension] : 특정 확장자를 가지는 파일 모두를 무시하겠다라는 것
  [Ignore custom patten] : 특정 부분만?
3. OK를 하면 목록에 .gitignore 파일이 생긴것으로 SourceTree가 인지한다. 그내용을 보면 어떤 파일인지, 아니면 특정 확장자를 무시할지 내용이 적혀 있다.

-> ignore를 패턴을 적용하려면 glob이라는 언어를 사용해야 한다???
-> gitignore.io 사이트를 들어가면 특정 툴에서 무시해도 될만한 것들을 알아서 만들어준다.
  -> 그걸 복사해서 gitignore 파일에 집어넣으면 된다.

----------------------------------

환경 파일 관리
- 보안이 필요하거나 다른 환경마다 관리가 필요한 경우
ex) 어플리케이션 서버에서 데이터베이스 서버를 접속할 때 인증이 필요하다. 이때??

----> 이건 생활 코딩의 "환경 파일의 관리" 부분을 볼 것  
    -> 혼자 할 때는 중요한 것은 아닌것으로 사료됨
